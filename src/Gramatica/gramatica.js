/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[7,118],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,25],$V8=[18,19,20,21,22,55,93],$V9=[11,15,17],$Va=[2,5],$Vb=[1,40],$Vc=[1,41],$Vd=[1,46],$Ve=[8,18,19,20,21,22,55,59,61,64,67,69,72,75,77,79,81,84,85,93],$Vf=[1,56],$Vg=[1,50],$Vh=[1,51],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,57],$Vn=[1,58],$Vo=[1,68],$Vp=[1,67],$Vq=[1,69],$Vr=[1,70],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[11,17,23,24,25,26,27,28,29,30,31,32,33,34,35,36,45,73],$VD=[1,84],$VE=[1,87],$VF=[1,100],$VG=[1,103],$VH=[1,105],$VI=[1,106],$VJ=[1,104],$VK=[1,107],$VL=[1,92],$VM=[1,101],$VN=[1,102],$VO=[11,45],$VP=[1,140],$VQ=[1,141],$VR=[1,143],$VS=[1,144],$VT=[1,142],$VU=[1,145],$VV=[1,146],$VW=[8,18,19,20,21,22,59,61,64,67,69,81,84,85],$VX=[1,155],$VY=[1,156],$VZ=[1,160],$V_=[1,162],$V$=[11,17,23,24,29,30,31,32,33,34,35,36,45,73],$V01=[11,17,23,24,25,26,27,29,30,31,32,33,34,35,36,45,73],$V11=[11,17,29,30,31,32,33,34,35,36,45,73],$V21=[11,17,33,34,35,36,45,73],$V31=[8,18,19,20,21,22,55,59,61,64,67,69,81,84,85],$V41=[8,18,19,20,21,22,55,59,61,64,67,69,72,75,77,79,81,84,85],$V51=[1,176],$V61=[17,45],$V71=[1,206],$V81=[1,207],$V91=[1,197],$Va1=[1,210],$Vb1=[1,212],$Vc1=[1,227],$Vd1=[8,18,19,20,21,22,55,59,61,64,67,69,77,79,81,84,85],$Ve1=[8,18,19,20,21,22,55,59,61,64,65,67,69,72,75,77,79,81,84,85],$Vf1=[55,72,75],$Vg1=[8,18,19,20,21,22,55,59,61,64,67,69,72,75,77,81,84,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"arch":4,"EOF":5,"clase":6,"CLASS":7,"IDENTIFICADOR":8,"instclase":9,"listaid":10,"COMA":11,"declavar":12,"tipo":13,"asigvar":14,"ASIGNADOR":15,"expresion":16,"PTCOMA":17,"BOOLEAN":18,"CHAR":19,"STRING":20,"INT":21,"DOUBLE":22,"RESTA":23,"SUMA":24,"POR":25,"DIVIDIDO":26,"MODULO":27,"POTENCIA":28,"MENOR":29,"MAYOR":30,"MAYORIGUAL":31,"MENORIGUAL":32,"IGUAL":33,"DISTINTO":34,"OR":35,"AND":36,"NOT":37,"NUMERO":38,"TRUE":39,"FALSE":40,"CADENA":41,"llamada":42,"CARACTER":43,"PARIZQ":44,"PARDER":45,"param":46,"lparam":47,"condicion":48,"operador":49,"INCREMENTO":50,"DECREMENTO":51,"repmet":52,"LLAVEIZQ":53,"instruccionesrepmet":54,"LLAVEDER":55,"ifmet":56,"instruccionesifmet":57,"sentwhilemet":58,"WHILE":59,"sentformet":60,"FOR":61,"inifor":62,"sentifmet":63,"IF":64,"ELSE":65,"sentdowhilemet":66,"DO":67,"sentswitchmet":68,"SWITCH":69,"casedef":70,"listacase":71,"CASE":72,"DOSPUNTOS":73,"instruccioneswemet":74,"DEFAULT":75,"sentbreak":76,"BREAK":77,"sentcont":78,"CONTINUE":79,"sentretmet":80,"RETURN":81,"sentretfun":82,"sout":83,"PRINT":84,"PRINTLN":85,"instruccionifmet":86,"varmet":87,"instruccionrepmet":88,"instruccionswmet":89,"parametros":90,"listaparametros":91,"metodo":92,"VOID":93,"MAIN":94,"instmetodo":95,"funcion":96,"instfun":97,"repfun":98,"instruccionesrepfun":99,"iffun":100,"instruccionesiffun":101,"sentwhilefun":102,"sentforfun":103,"sentiffun":104,"sentdowhilefun":105,"sentswitchfun":106,"casedeffun":107,"instruccioniffun":108,"instruccionrepfun":109,"instruccionswfun":110,"instruccioneswefun":111,"listacasef":112,"instrucsfun":113,"instrucfun":114,"instruccionesclase":115,"instruccionclase":116,"sentimp":117,"IMPORT":118,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"CLASS",8:"IDENTIFICADOR",11:"COMA",15:"ASIGNADOR",17:"PTCOMA",18:"BOOLEAN",19:"CHAR",20:"STRING",21:"INT",22:"DOUBLE",23:"RESTA",24:"SUMA",25:"POR",26:"DIVIDIDO",27:"MODULO",28:"POTENCIA",29:"MENOR",30:"MAYOR",31:"MAYORIGUAL",32:"MENORIGUAL",33:"IGUAL",34:"DISTINTO",35:"OR",36:"AND",37:"NOT",38:"NUMERO",39:"TRUE",40:"FALSE",41:"CADENA",43:"CARACTER",44:"PARIZQ",45:"PARDER",50:"INCREMENTO",51:"DECREMENTO",53:"LLAVEIZQ",55:"LLAVEDER",59:"WHILE",61:"FOR",64:"IF",65:"ELSE",67:"DO",69:"SWITCH",72:"CASE",73:"DOSPUNTOS",75:"DEFAULT",77:"BREAK",79:"CONTINUE",81:"RETURN",84:"PRINT",85:"PRINTLN",93:"VOID",94:"MAIN",118:"IMPORT"},
productions_: [0,[3,2],[3,1],[6,3],[10,3],[10,1],[12,3],[14,3],[14,1],[13,1],[13,1],[13,1],[13,1],[13,1],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,1],[16,3],[42,2],[47,3],[47,1],[46,2],[46,1],[48,3],[49,1],[49,1],[52,3],[52,2],[56,3],[56,2],[58,3],[60,10],[63,3],[63,5],[63,5],[66,5],[68,7],[62,4],[62,3],[71,5],[71,4],[70,1],[70,3],[76,2],[78,2],[80,2],[82,3],[83,5],[83,5],[57,2],[57,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,3],[86,2],[54,2],[54,1],[88,1],[88,1],[89,1],[89,1],[74,2],[74,1],[87,1],[87,2],[90,4],[90,2],[91,2],[91,1],[92,5],[92,5],[95,3],[95,2],[96,5],[98,3],[98,2],[100,3],[100,2],[102,3],[103,10],[104,3],[104,5],[104,5],[105,5],[106,7],[101,2],[101,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,3],[108,2],[99,2],[99,1],[109,1],[109,1],[110,1],[110,1],[111,2],[111,1],[112,5],[112,4],[107,1],[107,3],[97,4],[97,3],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,3],[114,2],[113,2],[113,1],[115,2],[115,1],[116,1],[116,1],[116,1],[9,3],[9,2],[117,4],[117,3],[4,2],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Nodo("RAIZ","RAIZ"); this.$.setHijos($$[$0-1]); return this.$;
break;
case 2:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 3:
this.$ = new Nodo("CLASE",$$[$0-1]); if($$[$0]!=null) this.$.setHijos($$[$0])
break;
case 4:
this.$ = $$[$0-2]; this.$.push(new Nodo("VARIABLE",$$[$0]));
break;
case 5:
this.$ = []; this.$.push(new Nodo("VARIABLE",$$[$0]));
break;
case 6:
 this.$ = new Nodo("DECLARACION",$$[$0-2]); this.$.setHijos($$[$0-1]); if($$[$0] != null) this.$.sentencias.push($$[$0]); 
break;
case 7:
this.$ = new Nodo("ASIGNACION","EXPRESION"); this.$.sentencias.push($$[$0-1]);
break;
case 8: case 42: case 98: case 154:
this.$ = null;
break;
case 9: case 10: case 11: case 61: case 71: case 72: case 83: case 84: case 85: case 86: case 113: case 114: case 115: case 117: case 125: case 126: case 127: case 128: case 133: case 137: case 138: case 139: case 141: case 150: case 151: case 152:
this.$ = $$[$0];
break;
case 12: case 13:
this.$ =$$[$0];
break;
case 14:
 this.$ = new Nodo("ARITMETICA",$$[$0-1]); this.$.sentencias.push($$[$0]);
break;
case 15: case 16: case 17: case 18: case 19: case 20:
 this.$ = new Nodo("ARITMETICA",$$[$0-1]); this.$.sentencias.push($$[$0-2]); this.$.sentencias.push($$[$0]); 
break;
case 21: case 22: case 23: case 24: case 25: case 26:
 this.$ = new Nodo("RELACIONAL",$$[$0-1]); this.$.sentencias.push($$[$0-2]); this.$.sentencias.push($$[$0]); 
break;
case 27: case 28:
 this.$ = new Nodo("LOGICA",$$[$0-1]); this.$.sentencias.push($$[$0-2]); this.$.sentencias.push($$[$0]); 
break;
case 29:
 this.$ = new Nodo("LOGICA", $$[$0-1]); this.$.sentencias.push($$[$0]); 
break;
case 30: case 31: case 32: case 33: case 36:
 this.$ = new Nodo("PRIMITIVO",$$[$0]); 
break;
case 34:
 this.$ = new Nodo("VARIABLE",$$[$0]); 
break;
case 35:
 this.$ = new Nodo("LLAMADA",$$[$0-1]); this.$.setHijos($$[$0]);
break;
case 37: case 46: case 48: case 100: case 102:
 this.$ = $$[$0-1]; 
break;
case 38:
this.$ = []; if($$[$0]!= null) this.$ =$$[$0];
break;
case 39:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 40: case 70: case 82: case 88: case 112: case 124: case 130: case 149:
this.$ = []; this.$.push($$[$0]);
break;
case 41: case 97: case 153:
this.$ = $$[$0-1];
break;
case 43:
 this.$ = new Nodo("CONDICION", "CONDICION"); this.$.sentencias.push($$[$0-1]) 
break;
case 44: case 45:
 this.$ = new Nodo("SENTENCIA",$$[$0]); 
break;
case 47: case 49: case 101: case 103:
 this.$ = null; 
break;
case 50: case 104:
 this.$ = new Nodo("SENTENCIA",$$[$0-2]); if($$[$0] != null) this.$.setHijos($$[$0]); this.$.sentencias.unshift($$[$0-1])
break;
case 51: case 105:
this.$ = new Nodo("SENTENCIA",$$[$0-9]); if($$[$0] != null) this.$.setHijos($$[$0]); this.$.sentencias.unshift($$[$0-2]); this.$.sentencias.unshift(new Nodo("CONDICION","CONDICION")) ; this.$.sentencias[0].sentencias.push($$[$0-5]); this.$.sentencias.unshift($$[$0-7]);
break;
case 52: case 106:
this.$ = new Nodo("SENTENCIA",$$[$0-2]); if($$[$0] != null) this.$.setHijos($$[$0]); this.$.sentencias.unshift($$[$0-1]);
break;
case 53: case 107:
this.$ = new Nodo("SENTENCIA",$$[$0-4]); if($$[$0-2] != null) this.$.setHijos($$[$0-2]); this.$.sentencias.unshift($$[$0-3]);this.$.sentencias.push(new Nodo("SENTENCIA",$$[$0-1])); if($$[$0] != null) this.$.sentencias[this.$.sentencias.length-1].setHijos($$[$0]);
break;
case 54: case 108:
this.$ = new Nodo("SENTENCIA",$$[$0-4]); if($$[$0-2] != null) this.$.setHijos($$[$0-2]);this.$.sentencias.unshift($$[$0-3]);this.$.sentencias.push($$[$0]);
break;
case 55: case 109:
 this.$ = new Nodo("SENTENCIA",$$[$0-4]); if($$[$0-3] != null) this.$.setHijos($$[$0-3]);  this.$.sentencias.push($$[$0-1]); 
break;
case 56: case 110:
this.$ = new Nodo("SENTENCIA",$$[$0-6]); this.$.setHijos($$[$0-1]); this.$.sentencias.unshift($$[$0-4])
break;
case 57:
this.$ = new Nodo("DECLARACION",$$[$0-3]); this.$.sentencias.push(new Nodo("VARIABLE",$$[$0-2]));this.$.sentencias[0].sentencias.push($$[$0]);
break;
case 58:
this.$ = new Nodo("ASIGNACION",$$[$0-2]); this.$.sentencias.push($$[$0]);
break;
case 59: case 131:
this.$ = $$[$0-4]; this.$.push(new Nodo("CASE",$$[$0-4])); this.$[this.$.length-1].setHijos($$[$0]);
break;
case 60: case 132:
this.$ = []; this.$.push(new Nodo("CASE",$$[$0-3])); this.$[0].setHijos($$[$0]);
break;
case 62: case 134:
this.$ = $$[$0-2]; this.$.push(new Nodo("DEFAULT",$$[$0-1])) 
break;
case 63: case 64:
this.$ = new Nodo("SENTENCIA",$$[$0-1]);
break;
case 65:
this.$ = new Nodo("RETURN",$$[$0-1])
break;
case 66:
this.$ = new Nodo("RETURN",$$[$0-2]); this.$.sentencias.push($$[$0-1]); 
break;
case 67: case 68:
this.$ = new Nodo("SENTENCIA",$$[$0-4]); this.$.sentencias.push($$[$0-2])
break;
case 69: case 81: case 87: case 111: case 123: case 129: case 148:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 73: case 75:
this.$ = $$[$0]; 
break;
case 74:
 this.$ = $$[$0]; 
break;
case 76: case 77: case 78: case 89: case 116: case 118: case 119: case 120: case 140: case 142: case 143:
 this.$ = $$[$0];
break;
case 79: case 121: case 144:
 this.$ = new Nodo("LLAMADA",$$[$0-2]); this.$.setHijos($$[$0-1]); if(this.$ != null) this.$.valor = $$[$0-2]
break;
case 80: case 122: case 145:
 this.$ = $$[$0]; if(this.$ != null) this.$.valor = $$[$0-1]
break;
case 90:
 this.$ = $$[$0-1];
break;
case 91:
 this.$ = $$[$0-3]; this.$.push(new Nodo("PARAMETRO",$$[$0-1])); this.$[this.$.length-1].sentencias.push(new Nodo("VARIABLE",$$[$0]));
break;
case 92:
 this.$ = []; this.$.push(new Nodo("PARAMETRO",$$[$0-1])); this.$[0].sentencias.push(new Nodo("VARIABLE",$$[$0])); 
break;
case 93:
this.$ = $$[$0-1]
break;
case 94:
this.$ = null
break;
case 95:
 this.$ = new Nodo("MAIN",$$[$0-3]); if($$[$0] != null) this.$.setHijos($$[$0]);
break;
case 96:
 this.$ = new Nodo("METODO",$$[$0-3]); if($$[$0-1]!=null) this.$.setHijos($$[$0-1]); if($$[$0] != null) this.$.agregarHijos($$[$0]);
break;
case 99:
 this.$ = new Nodo("FUNCION",$$[$0-4] + " " +$$[$0-3]); if($$[$0-1]!= null) this.$.setHijos($$[$0-1]);this.$.agregarHijos($$[$0]);
break;
case 135:
this.$ = $$[$0-2]; this.$.push($$[$0-1]);
break;
case 136:
this.$ = []; this.$.push($$[$0-1]);
break;
case 146:
this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 147:
this.$ = []; this.$.push($$[$0]); 
break;
case 155:
this.$ = $$[$0-3]; this.$.push(new Nodo("IMPORT",$$[$0-1]))
break;
case 156:
this.$ = []; this.$.push(new Nodo("IMPORT",$$[$0-1]))
break;
case 157:
this.$ = $$[$0-1]; this.$.push($$[$0])
break;
case 158:
this.$ = []; this.$.push($$[$0])
break;
}
},
table: [{2:[1,3],3:1,4:2,6:5,7:$V0,117:4,118:[1,6]},{1:[3]},{5:[1,8]},{1:[2,2]},{6:9,7:$V0,118:[1,10]},{5:[2,158]},{8:[1,11]},{8:[1,12]},{1:[2,1]},{5:[2,157]},{8:[1,13]},{17:[1,14]},{9:15,53:[1,16]},{17:[1,17]},o($V1,[2,156]),{5:[2,3]},{12:23,13:24,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,19],92:22,93:$V7,96:21,115:18,116:20},o($V1,[2,155]),{12:23,13:24,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,31],92:22,93:$V7,96:21,116:32},{5:[2,154]},o($V8,[2,149]),o($V8,[2,150]),o($V8,[2,151]),o($V8,[2,152]),{8:[1,33],10:34},{8:[1,36],94:[1,35]},{8:[2,9]},{8:[2,10]},{8:[2,11]},{8:[2,12]},{8:[2,13]},{5:[2,153]},o($V8,[2,148]),o($V9,$Va,{44:[1,37]}),{11:[1,39],14:38,15:$Vb,17:$Vc},{44:[1,42]},{44:[1,43]},{13:47,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,45:$Vd,90:45,91:44},o($Ve,[2,6]),{8:[1,48]},{8:$Vf,16:49,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},o($Ve,[2,8]),{45:[1,59]},{13:47,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,45:$Vd,90:45,91:60},{53:[1,62],97:61},{11:[1,64],45:[1,63]},{53:[2,94]},{8:[1,65]},o($V9,[2,4]),{17:[1,66],23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB},{8:$Vf,16:81,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:82,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},o($VC,[2,30]),o($VC,[2,31]),o($VC,[2,32]),o($VC,[2,33]),o($VC,[2,34],{42:83,44:$VD}),o($VC,[2,36]),{8:$Vf,16:85,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{53:$VE,95:86},{53:$VE,95:88},o($V8,[2,99]),{8:$VF,12:99,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,81:$VL,82:90,83:93,84:$VM,85:$VN,102:94,103:96,104:97,105:95,106:98,113:89,114:91},{53:[2,93]},{13:109,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6},o($VO,[2,92]),o($Ve,[2,7]),{8:$Vf,16:110,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:111,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:112,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:113,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:114,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:115,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:116,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:117,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:118,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:119,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:120,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:121,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:122,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:123,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},o($VC,[2,14]),o($VC,[2,29]),o($VC,[2,35]),{8:$Vf,16:127,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn,45:[1,126],46:124,47:125},{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,45:[1,128]},o($V8,[2,95]),{8:$VP,12:138,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,130],57:129,58:133,59:$VQ,60:135,61:$VR,63:136,64:$VS,66:134,67:$VT,68:137,69:$VU,80:139,81:$VV,83:132,84:$VM,85:$VN,86:131},o($V8,[2,96]),{8:$VF,12:99,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,81:$VL,82:147,83:93,84:$VM,85:$VN,102:94,103:96,104:97,105:95,106:98,114:148},{55:[1,149]},o($VW,[2,147]),{8:$Vf,16:150,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},o($VW,[2,137]),o($VW,[2,138]),o($VW,[2,139]),o($VW,[2,140]),o($VW,[2,141]),o($VW,[2,142]),o($VW,[2,143]),{14:153,15:$Vb,17:$Vc,42:151,44:$VD,49:154,50:$VX,51:$VY,87:152},{44:[1,157]},{44:[1,158]},{44:$VZ,48:159},{53:$V_,98:161},{44:[1,163]},{44:$VZ,48:164},{44:[1,165]},{8:[1,166],10:34},{8:[1,167]},o($V$,[2,15],{25:$Vq,26:$Vr,27:$Vs,28:$Vt}),o($V$,[2,16],{25:$Vq,26:$Vr,27:$Vs,28:$Vt}),o($V01,[2,17],{28:$Vt}),o($V01,[2,18],{28:$Vt}),o($V01,[2,19],{28:$Vt}),o($VC,[2,20]),o($V11,[2,21],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt}),o($V11,[2,22],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt}),o($V11,[2,23],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt}),o($V11,[2,24],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt}),o($V21,[2,25],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx}),o($V21,[2,26],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx}),o([11,17,35,45,73],[2,27],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,36:$VB}),o([11,17,35,36,45,73],[2,28],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz}),o($VC,[2,38]),{11:[1,169],45:[1,168]},o($VC,[2,42]),o($VO,[2,40],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB}),o($VC,[2,37]),{8:$VP,12:138,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,170],58:133,59:$VQ,60:135,61:$VR,63:136,64:$VS,66:134,67:$VT,68:137,69:$VU,80:139,81:$VV,83:132,84:$VM,85:$VN,86:171},o($V8,[2,98]),o($V31,[2,70]),o($V41,[2,71]),o($V41,[2,72]),o($V41,[2,73]),o($V41,[2,74]),o($V41,[2,75]),o($V41,[2,76]),o($V41,[2,77]),o($V41,[2,78]),{14:153,15:$Vb,17:$Vc,42:172,44:$VD,49:154,50:$VX,51:$VY,87:173},{44:$VZ,48:174},{52:175,53:$V51},{44:[1,177]},{44:$VZ,48:178},{44:[1,179]},{17:[1,180]},{55:[1,181]},o($VW,[2,146]),o($V8,[2,136]),{17:[1,182],23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB},{17:[1,183]},o($VW,[2,145]),o($V41,[2,89]),{17:[1,184]},o($V61,[2,44]),o($V61,[2,45]),{8:$Vf,16:185,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:$Vf,16:186,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{53:$V_,98:187},{8:$Vf,16:188,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{59:[1,189]},{8:$V71,12:204,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,191],59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,76:196,77:$V81,78:194,79:$V91,81:$VL,82:205,83:198,84:$VM,85:$VN,99:190,102:199,103:201,104:202,105:200,106:203,108:195,109:192,110:193},{8:$Va1,13:209,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,62:208},{53:$Vb1,100:211},{8:$Vf,16:213,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},o($V9,$Va),o($VO,[2,91]),o($VC,[2,41]),{8:$Vf,16:214,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},o($V8,[2,97]),o($V31,[2,69]),{17:[1,215]},o($V41,[2,80]),{52:216,53:$V51},{59:[1,217]},{8:$VP,12:138,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,54:218,55:[1,219],58:133,59:$VQ,60:135,61:$VR,63:136,64:$VS,66:134,67:$VT,68:137,69:$VU,76:224,77:$V81,78:222,79:$V91,80:139,81:$VV,83:132,84:$VM,85:$VN,86:223,88:220,89:221},{8:$Va1,13:209,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,62:225},{53:$Vc1,56:226},{8:$Vf,16:228,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},o($V41,[2,65]),o($V8,[2,135]),o($V41,[2,66]),o($VW,[2,144]),o($V41,[2,90]),{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,45:[1,229]},{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,45:[1,230]},o($V41,[2,104]),{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,45:[1,231]},{44:$VZ,48:232},{8:$V71,12:204,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,233],59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,76:196,77:$V81,78:194,79:$V91,81:$VL,82:205,83:198,84:$VM,85:$VN,102:199,103:201,104:202,105:200,106:203,108:195,109:234,110:193},o($V41,[2,101]),o($Vd1,[2,124]),o($Vd1,[2,125]),o($Vd1,[2,126]),o($V41,[2,127]),o($V41,[2,128]),{17:[1,235]},o($V41,[2,113]),o($V41,[2,114]),o($V41,[2,115]),o($V41,[2,116]),o($V41,[2,117]),o($V41,[2,118]),o($V41,[2,119]),o($V41,[2,120]),{14:153,15:$Vb,17:$Vc,42:236,44:$VD,49:154,50:$VX,51:$VY,87:237},{17:[1,238]},{17:[1,239]},{8:[1,240]},{15:[1,241]},o($V41,[2,106],{65:[1,242]}),{8:$V71,12:204,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,244],59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,81:$VL,82:205,83:198,84:$VM,85:$VN,101:243,102:199,103:201,104:202,105:200,106:203,108:245},{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,45:[1,246]},o($VO,[2,39],{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB}),o($V41,[2,79]),o($V41,[2,50]),{44:$VZ,48:247},{8:$VP,12:138,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,248],58:133,59:$VQ,60:135,61:$VR,63:136,64:$VS,66:134,67:$VT,68:137,69:$VU,76:224,77:$V81,78:222,79:$V91,80:139,81:$VV,83:132,84:$VM,85:$VN,86:223,88:249,89:221},o($V41,[2,47]),o($Vd1,[2,82]),o($Vd1,[2,83]),o($Vd1,[2,84]),o($V41,[2,85]),o($V41,[2,86]),{17:[1,250]},o($V41,[2,52],{65:[1,251]}),{8:$VP,12:138,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,253],57:252,58:133,59:$VQ,60:135,61:$VR,63:136,64:$VS,66:134,67:$VT,68:137,69:$VU,80:139,81:$VV,83:132,84:$VM,85:$VN,86:131},{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,45:[1,254]},{17:[1,255]},{17:[1,256]},o([17,53],[2,43]),{17:[1,257]},o($V41,[2,100]),o($Vd1,[2,123]),o($Vd1,[2,64]),{17:[1,258]},o($V41,[2,122]),o($V41,[2,63]),{8:$Vf,16:259,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{15:[1,260]},{8:$Vf,16:261,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{53:$Vb1,64:$VI,100:262,104:263},{8:$V71,12:204,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,264],59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,81:$VL,82:205,83:198,84:$VM,85:$VN,102:199,103:201,104:202,105:200,106:203,108:265},o($Ve1,[2,103]),o($V31,[2,112]),{53:[1,266]},{17:[1,267]},o($V41,[2,46]),o($Vd1,[2,81]),{8:$Vf,16:268,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{53:$Vc1,56:269,63:270,64:$VS},{8:$VP,12:138,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,55:[1,271],58:133,59:$VQ,60:135,61:$VR,63:136,64:$VS,66:134,67:$VT,68:137,69:$VU,80:139,81:$VV,83:132,84:$VM,85:$VN,86:171},o($Ve1,[2,49]),{53:[1,272]},o($V41,[2,67]),o($V41,[2,68]),o($V41,[2,109]),o($V41,[2,121]),{17:[1,273],23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB},{8:$Vf,16:274,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{17:[2,58],23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB},o($V41,[2,107]),o($V41,[2,108]),o($Ve1,[2,102]),o($V31,[2,111]),{72:[1,277],107:275,112:276},o($V41,[2,55]),{17:[1,278],23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB},o($V41,[2,53]),o($V41,[2,54]),o($Ve1,[2,48]),{70:279,71:280,72:[1,281]},{8:[1,282]},{17:[2,57],23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB},{55:[1,283]},{55:[2,133],72:[1,285],75:[1,284]},{8:$Vf,16:286,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{8:[1,287]},{55:[1,288]},{55:[2,61],72:[1,290],75:[1,289]},{8:$Vf,16:291,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{49:292,50:$VX,51:$VY},o($V41,[2,110]),{73:[1,293]},{8:$Vf,16:294,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,73:[1,295]},{49:296,50:$VX,51:$VY},o($V41,[2,56]),{73:[1,297]},{8:$Vf,16:298,23:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,43:$Vm,44:$Vn},{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,73:[1,299]},{45:[1,300]},{55:[2,134]},{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,73:[1,301]},{8:$V71,12:204,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,76:196,77:$V81,81:$VL,82:205,83:198,84:$VM,85:$VN,102:199,103:201,104:202,105:200,106:203,108:195,110:303,111:302},{45:[1,304]},{55:[2,62]},{23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,73:[1,305]},{8:$VP,12:138,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,58:133,59:$VQ,60:135,61:$VR,63:136,64:$VS,66:134,67:$VT,68:137,69:$VU,74:306,76:224,77:$V81,80:139,81:$VV,83:132,84:$VM,85:$VN,86:223,89:307},{53:$V_,98:308},{8:$V71,12:204,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,76:196,77:$V81,81:$VL,82:205,83:198,84:$VM,85:$VN,102:199,103:201,104:202,105:200,106:203,108:195,110:303,111:309},o($Vf1,[2,132],{13:108,108:195,76:196,83:198,102:199,105:200,103:201,104:202,106:203,12:204,82:205,110:310,8:$V71,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,77:$V81,81:$VL,84:$VM,85:$VN}),o($Vg1,[2,130]),{52:311,53:$V51},{8:$VP,12:138,13:108,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,58:133,59:$VQ,60:135,61:$VR,63:136,64:$VS,66:134,67:$VT,68:137,69:$VU,74:312,76:224,77:$V81,80:139,81:$VV,83:132,84:$VM,85:$VN,86:223,89:307},o($Vf1,[2,60],{13:108,83:132,58:133,66:134,60:135,63:136,68:137,12:138,80:139,86:223,76:224,89:313,8:$VP,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VQ,61:$VR,64:$VS,67:$VT,69:$VU,77:$V81,81:$VV,84:$VM,85:$VN}),o($Vg1,[2,88]),o($V41,[2,105]),o($Vf1,[2,131],{13:108,108:195,76:196,83:198,102:199,105:200,103:201,104:202,106:203,12:204,82:205,110:310,8:$V71,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VG,61:$VH,64:$VI,67:$VJ,69:$VK,77:$V81,81:$VL,84:$VM,85:$VN}),o($Vg1,[2,129]),o($V41,[2,51]),o($Vf1,[2,59],{13:108,83:132,58:133,66:134,60:135,63:136,68:137,12:138,80:139,86:223,76:224,89:313,8:$VP,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VQ,61:$VR,64:$VS,67:$VT,69:$VU,77:$V81,81:$VV,84:$VM,85:$VN}),o($Vg1,[2,87])],
defaultActions: {3:[2,2],5:[2,158],8:[2,1],9:[2,157],15:[2,3],19:[2,154],26:[2,9],27:[2,10],28:[2,11],29:[2,12],30:[2,13],31:[2,153],46:[2,94],63:[2,93],293:[2,134],297:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Nodo = require('../Arbol/Nodos');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return'PRINTLN';
break;
case 4:return'PRINT';
break;
case 5:return 21;
break;
case 6:return 22;
break;
case 7:return 18;
break;
case 8:return 19;
break;
case 9:return 20;
break;
case 10:return 7;
break;
case 11:return 118;
break;
case 12:return 39;
break;
case 13:return 40;
break;
case 14:return 65;
break;
case 15:return 64;
break;
case 16:return 69;
break;
case 17:return 72;
break;
case 18:return 75;
break;
case 19:return 77;
break;
case 20:return 59;
break;
case 21:return 67;
break;
case 22:return 61;
break;
case 23:return 79;
break;
case 24:return 81;
break;
case 25:return 93;
break;
case 26:return 94;
break;
case 27:return 31;
break;
case 28:return 32;
break;
case 29:return 34;
break;
case 30:return 33;
break;
case 31:return 30;
break;
case 32:return 29;
break;
case 33:return 17;
break;
case 34:return 11;
break;
case 35:return 73;
break;
case 36:return 44;
break;
case 37:return 45;
break;
case 38:return 53;
break;
case 39:return 55;
break;
case 40:return 15;
break;
case 41:return 50;
break;
case 42:return 51;
break;
case 43:return 24;
break;
case 44:return 23;
break;
case 45:return 25;
break;
case 46:return 26;
break;
case 47:return 28;
break;
case 48:return 27;
break;
case 49:return 36;
break;
case 50:return 35;
break;
case 51:return 37;
break;
case 52:return 38;
break;
case 53:return 8;
break;
case 54:return 41;
break;
case 55:return 43;
break;
case 56:return 5;
break;
case 57: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\/\/[^\n]*)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:else\b)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return )/,/^(?:void\b)/,/^(?:main\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:==)/,/^(?:>)/,/^(?:<)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:([a-zA-Z_])[0-9a-zA-Z_]*)/,/^(?:("[^"]*"))/,/^(?:('[^']'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}